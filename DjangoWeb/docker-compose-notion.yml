# 파일의 규격에 따라 지원하는 옵션이 달라지며, 최근에 "3.1"이 등장하긴 했지만 보통은 "2"나 "2.1"을 사용해도 충분합니다.
version: '3.5'

# 실행하려는 서비스들을 정의합니다. 서비스란, 앱 컨테이너나 postgres 컨테이너 각각의 묶음
services:
  nginx:
    # 서비스에서 사용할 도커 이미지
    image: nginx:latest
    ports:
       - "80:80" # {외부포트} : {컨테이너포트}
#      - target: 80       ## 컨테이너 내부 포트
#        published: 80    ## 호스트OS에서 공개할 포트
#        protocol: tcp      ## 포트 프로토콜

    volumes:
      # {볼륨명}: {컨테이너 위치}
      - .:/code
#      - django_api:/django
      # 로컬의 conf/nginx 디렉토리를 컨테이너의 /etc/nginx/conf.d로 복사., upstream server 정보 업데이트
      # - ./config/nginx:/etc/nginx/conf.d
      # nginx 스펙관련 config파일 업데이트, file override
      - ./config/nginx2/nginx.conf:/etc/nginx/nginx.conf

    # 여기서 지정한 내용은, web_app 서비스가 실행된 후에 nginx 서비스를 실행하겠다는 의미
    # depends_on은 컨테이너 시작 순서만 제어한다.
    depends_on:
      - web

  web:
    # 앱 서비스는 도커 이미지를 빌드할 일이 잦기 때문에, 특정 이미지 대신 build 옵션을 추가합니다.
    build:
      # context는 docker build 명령을 실행할 디렉터리 경로
      context: .
      # '개발용' 도커 이미지를 빌드하는 데 사용할 Dockerfile을 지정
      dockerfile: Dockerfile
    # docker run으로 앱 컨테이너를 실행할 때 가장 마지막에 적었던 명령어를 추가한다.
    # 여기서는 gunicorn으로 django 서버를 실행한다.
    command: gunicorn -c mysite/gunicorn_cfg.py mysite.wsgi:application --bind 0.0.0.0:8000
    # 현재 디렉토리 전부를 컨테이너의 /code에 마운트한다
    volumes:
      - .:/code
#      - django_api:/django/

    # 도커 컴포즈로 서비스를 실행하면 기본적으로 가상의 네트워크가 하나 만들어지고, 네트워크 외부의 접근이 막힘. (도커 컨테이너가 그렇듯.)
    # 따라서 외부에서 접근할 수 있는 포트를 지정해주어야 하며, 여기서는 Django 개발 서버의 기본 포트 8000을 지정
    # 컨테이너 포트번호만 지정했다, 호스트는 랜덤한 값으로 설정
    # 호스트머신에서 직접 접근하지않고 웹 서버 기능을 갖고있는 컨테이너를 경유해서 접근하기때문
    expose:
      - "8000"
volumes:
  django_api: {}
